#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç DIAGN√ìSTICO ESPEC√çFICO DE CEMENTO
===================================

Este script verificar√° por qu√© la gr√°fica de cemento dice que no hay datos
suficientes cuando s√≠ hay registros de cemento en el Excel.
"""

import os
import openpyxl
from datetime import datetime

def buscar_archivo_excel():
    """Busca el archivo Excel en las ubicaciones posibles"""
    ubicaciones = [
        "datos/inventario_materiales.xlsx",
        "inventario_materiales.xlsx",
        "./datos/inventario_materiales.xlsx"
    ]
    
    for ubicacion in ubicaciones:
        if os.path.exists(ubicacion):
            return ubicacion
    
    return None

def analizar_datos_cemento_detallado():
    """Analiza espec√≠ficamente los datos de cemento como lo hace la funci√≥n original"""
    
    archivo = buscar_archivo_excel()
    if not archivo:
        print("‚ùå No se encontr√≥ archivo Excel")
        return
    
    print(f"üìÅ Analizando archivo: {archivo}")
    
    try:
        libro = openpyxl.load_workbook(archivo)
        hoja = libro.active
        
        print(f"üìä Total de filas: {hoja.max_row}")
        print(f"üìä Total de columnas: {hoja.max_column}")
        
        # Mostrar encabezados para verificar estructura
        print(f"\nüìã ESTRUCTURA DEL ARCHIVO:")
        for col in range(1, min(hoja.max_column + 1, 8)):
            valor = hoja.cell(row=4, column=col).value
            print(f"   Columna {col}: {valor}")
        
        print(f"\nüîç BUSCANDO DATOS DE CEMENTO...")
        print("La funci√≥n busca:")
        print("‚Ä¢ Material que contenga 'Cemento'")
        print("‚Ä¢ Movimiento que contenga 'Salida'") 
        print("‚Ä¢ Cantidad num√©rica v√°lida")
        
        datos_cemento_encontrados = []
        todos_los_datos_cemento = []
        
        # Revisar TODOS los registros de cemento (no solo salidas)
        for row in range(5, hoja.max_row + 1):
            material = hoja.cell(row=row, column=3).value  # Columna C
            movimiento = hoja.cell(row=row, column=5).value  # Columna E
            cantidad = hoja.cell(row=row, column=6).value   # Columna F
            fecha = hoja.cell(row=row, column=1).value      # Columna A
            
            # Si hay material y contiene "Cemento"
            if material and "Cemento" in str(material):
                todos_los_datos_cemento.append({
                    'fila': row,
                    'fecha': fecha,
                    'material': material,
                    'movimiento': movimiento,
                    'cantidad': cantidad
                })
                
                print(f"   üì¶ Fila {row}: {material} | {movimiento} | {cantidad} | {fecha}")
                
                # Verificar si cumple criterios espec√≠ficos para gr√°fica de cemento
                if movimiento and "Salida" in str(movimiento):
                    try:
                        cantidad_num = float(str(cantidad).replace(",", "."))
                        datos_cemento_encontrados.append((fecha, cantidad_num))
                        print(f"      ‚úÖ V√ÅLIDO para gr√°fica: {fecha} - {cantidad_num}")
                    except Exception as e:
                        print(f"      ‚ùå Error procesando cantidad '{cantidad}': {e}")
                else:
                    print(f"      ‚ö†Ô∏è No es salida: {movimiento}")
        
        print(f"\nüìä RESUMEN:")
        print(f"‚Ä¢ Total registros de cemento encontrados: {len(todos_los_datos_cemento)}")
        print(f"‚Ä¢ Registros v√°lidos para gr√°fica (salidas): {len(datos_cemento_encontrados)}")
        
        if len(todos_los_datos_cemento) == 0:
            print("‚ùå PROBLEMA: No se encontr√≥ ning√∫n registro de cemento")
            print("üí° Verifica que el material se llame exactamente 'Cemento'")
        elif len(datos_cemento_encontrados) == 0:
            print("‚ùå PROBLEMA: Se encontraron registros de cemento pero ninguna SALIDA")
            print("üí° La gr√°fica de cemento solo muestra SALIDAS (consumo)")
            print("üí° Necesitas registrar algunas salidas de cemento")
        else:
            print("‚úÖ Datos v√°lidos encontrados para la gr√°fica")
            
        return datos_cemento_encontrados, todos_los_datos_cemento
        
    except Exception as e:
        print(f"‚ùå Error leyendo archivo: {e}")
        return None, None

def simular_funcion_grafica_cemento():
    """Simula exactamente lo que hace la funci√≥n original de gr√°fica de cemento"""
    
    print(f"\nüé¨ === SIMULANDO FUNCI√ìN ORIGINAL ===")
    
    archivo = buscar_archivo_excel()
    if not archivo:
        print("‚ùå No se encontr√≥ archivo - funci√≥n retornar√≠a None")
        return None
    
    try:
        libro = openpyxl.load_workbook(archivo)
        hoja = libro.active
        
        datos_cemento = []
        
        # Esta es la l√≥gica EXACTA de la funci√≥n original
        for row in range(5, hoja.max_row + 1):
            material = hoja.cell(row=row, column=3).value
            if material and "Cemento" in str(material):
                fecha = hoja.cell(row=row, column=1).value
                movimiento = hoja.cell(row=row, column=5).value
                cantidad = hoja.cell(row=row, column=6).value
                
                try:
                    cantidad_num = float(str(cantidad).replace(",", "."))
                    if "Salida" in str(movimiento):
                        datos_cemento.append((fecha, cantidad_num))
                        print(f"‚úÖ Datos v√°lidos: {fecha} - {cantidad_num}")
                except:
                    print(f"‚ö†Ô∏è Error procesando: {material} | {movimiento} | {cantidad}")
                    continue
        
        print(f"\nüìä RESULTADO DE LA SIMULACI√ìN:")
        print(f"‚Ä¢ Datos de cemento encontrados: {len(datos_cemento)}")
        
        if not datos_cemento:
            print("‚ùå La funci√≥n retornar√≠a None (no hay datos)")
            print("üí° Esto explica el mensaje 'no hay datos suficientes'")
            return None
        else:
            print("‚úÖ La funci√≥n generar√≠a la gr√°fica")
            print("üîç Datos que usar√≠a:")
            for fecha, cantidad in datos_cemento:
                print(f"   üìà {fecha}: {cantidad} bolsas")
            return datos_cemento
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
        return None

def verificar_con_graphics_generator():
    """Verifica qu√© est√° haciendo realmente el GraphicsGenerator"""
    
    print(f"\nüîß === VERIFICANDO GRAPHICS_GENERATOR ===")
    
    try:
        from modules.graphics_generator import GraphicsGenerator
        
        print("‚úÖ GraphicsGenerator importado correctamente")
        
        # Intentar generar la gr√°fica y capturar el resultado
        print("üéØ Intentando generar gr√°fica de cemento...")
        
        resultado = GraphicsGenerator.generar_grafica_cemento()
        
        if resultado:
            print(f"‚úÖ Gr√°fica generada: {resultado}")
            if os.path.exists(resultado):
                tama√±o = os.path.getsize(resultado) / 1024
                print(f"   üìè Tama√±o: {tama√±o:.1f} KB")
                print("üí° La gr√°fica se gener√≥ correctamente")
            else:
                print("‚ö†Ô∏è Se devolvi√≥ un nombre pero el archivo no existe")
        else:
            print("‚ùå GraphicsGenerator retorn√≥ None")
            print("üí° Esto confirma que no encuentra datos v√°lidos")
            
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error con GraphicsGenerator: {e}")
        import traceback
        traceback.print_exc()
        return None

def recomendar_solucion(datos_cemento_validos, todos_datos_cemento):
    """Recomienda la soluci√≥n seg√∫n el problema encontrado"""
    
    print(f"\nüí° === RECOMENDACIONES ===")
    
    if not todos_datos_cemento:
        print("üéØ PROBLEMA: No hay registros de cemento")
        print("‚úÖ SOLUCI√ìN:")
        print("   1. Usa el bot para registrar material 'Cemento'")
        print("   2. Aseg√∫rate de escribir exactamente 'Cemento'")
        print("   3. Registra algunas entradas y salidas")
        
    elif not datos_cemento_validos:
        print("üéØ PROBLEMA: Tienes cemento pero no hay SALIDAS")
        print("‚úÖ SOLUCI√ìN:")
        print("   1. La gr√°fica de cemento muestra CONSUMO (salidas)")
        print("   2. Registra algunas salidas de cemento:")
        print("      üì¶ Registrar Material ‚Üí Cemento ‚Üí üìâ Salida ‚Üí [cantidad]")
        print("   3. Ejemplos de salidas:")
        print("      ‚Ä¢ Producci√≥n de adoquines: 25 bolsas")
        print("      ‚Ä¢ Construcci√≥n: 10 bolsas")
        print("      ‚Ä¢ Reparaciones: 5 bolsas")
        
    else:
        print("üéØ PROBLEMA: Datos v√°lidos existen pero la funci√≥n no los ve")
        print("‚úÖ SOLUCI√ìN:")
        print("   1. Puede ser problema de configuraci√≥n de rutas")
        print("   2. O problema en el m√≥dulo GraphicsGenerator")
        print("   3. Verifica que el archivo est√© en la ubicaci√≥n correcta")

def main():
    """Funci√≥n principal del diagn√≥stico"""
    print("üîç DIAGN√ìSTICO ESPEC√çFICO DE GR√ÅFICA DE CEMENTO")
    print("=" * 60)
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # 1. An√°lisis detallado
    datos_validos, todos_datos = analizar_datos_cemento_detallado()
    
    # 2. Simulaci√≥n de funci√≥n original
    datos_simulacion = simular_funcion_grafica_cemento()
    
    # 3. Verificaci√≥n con m√≥dulo real
    resultado_real = verificar_con_graphics_generator()
    
    # 4. Recomendaciones
    recomendar_solucion(datos_validos, todos_datos)
    
    # 5. Resumen final
    print(f"\nüìã === RESUMEN FINAL ===")
    if todos_datos:
        print(f"üì¶ Registros de cemento: {len(todos_datos)}")
        if datos_validos:
            print(f"üìà Salidas v√°lidas: {len(datos_validos)}")
            print("üéØ ESPERADO: La gr√°fica deber√≠a funcionar")
        else:
            print("üìà Salidas v√°lidas: 0")
            print("üéØ ESPERADO: Mensaje 'no hay datos suficientes'")
    else:
        print("üì¶ No hay registros de cemento")
        print("üéØ ESPERADO: Mensaje 'no hay datos suficientes'")
    
    print(f"‚è∞ Diagn√≥stico completado: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Diagn√≥stico interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error en diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()
