#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üè≠ MAIN MODULAR - APLICACI√ìN PRINCIPAL COMPLETA
Sistema Industrial Unificado con Arquitectura Modular
Planta Premoldeados Tupiza - Gobierno Municipal

M√ìDULOS INCLUIDOS:
‚úÖ ExcelManager - Gesti√≥n de archivos Excel
‚úÖ GraphicsGenerator - Generaci√≥n de gr√°ficas
‚úÖ MenuController - Control de navegaci√≥n y men√∫s
‚úÖ PDFCreator - Generaci√≥n de reportes PDF
"""

import sys
import os
from datetime import datetime

def verificar_dependencias():
    """Verifica que todas las dependencias est√©n disponibles"""
    print("\nüîç === VERIFICACI√ìN DE DEPENDENCIAS ===")
    
    dependencias = {
        "openpyxl": "Gesti√≥n de archivos Excel",
        "matplotlib": "Generaci√≥n de gr√°ficas", 
        "reportlab": "Generaci√≥n de PDFs"
    }
    
    disponibles = []
    faltantes = []
    
    for dep, descripcion in dependencias.items():
        try:
            __import__(dep)
            print(f"‚úÖ {dep:<12} - {descripcion}")
            disponibles.append(dep)
        except ImportError:
            print(f"‚ùå {dep:<12} - {descripcion} (NO DISPONIBLE)")
            faltantes.append(dep)
    
    print(f"\nüìä Resumen: {len(disponibles)}/{len(dependencias)} dependencias disponibles")
    
    if faltantes:
        print("\nüí° Para instalar dependencias faltantes:")
        for dep in faltantes:
            print(f"   pip install {dep}")
    
    return len(faltantes) == 0

def verificar_modulos():
    """Verifica que todos los m√≥dulos est√©n disponibles"""
    print("\nüîß === VERIFICACI√ìN DE M√ìDULOS ===")
    
    try:
        from modules.config import VERSION, NOMBRE_SISTEMA
        print("‚úÖ config.py - Configuraci√≥n del sistema")
        
        from modules.excel_manager import ExcelManager
        print("‚úÖ excel_manager.py - Gesti√≥n de archivos Excel")
        
        from modules.graphics_generator import GraphicsGenerator
        print("‚úÖ graphics_generator.py - Generaci√≥n de gr√°ficas")
        
        from modules.menu_controller import MenuController
        print("‚úÖ menu_controller.py - Control de navegaci√≥n")
        
        from modules.pdf_creator import PDFCreator, validar_reportlab
        if validar_reportlab():
            print("‚úÖ pdf_creator.py - Generaci√≥n de reportes PDF")
        else:
            print("‚ö†Ô∏è pdf_creator.py - Cargado (reportlab no disponible)")
        
        return True, (ExcelManager, GraphicsGenerator, MenuController, PDFCreator)
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        print("üí° Verifica que todos los archivos est√©n en la carpeta 'modules/'")
        return False, None

def mostrar_informacion_sistema():
    """Muestra informaci√≥n completa del sistema"""
    from modules.config import VERSION, NOMBRE_SISTEMA, ENTIDAD, UBICACION
    
    print("\n" + "="*70)
    print("üè≠ === SISTEMA INDUSTRIAL UNIFICADO MODULAR ===")
    print("="*70)
    print(f"üìç Ubicaci√≥n: {UBICACION}")
    print(f"üèõÔ∏è Entidad: {ENTIDAD}")
    print(f"üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"‚öôÔ∏è Versi√≥n: {VERSION}")
    print("="*70)
    
    print("\nüîß M√ìDULOS DEL SISTEMA:")
    modulos = [
        ("üìä ExcelManager", "Gesti√≥n de archivos Excel y datos"),
        ("üìà GraphicsGenerator", "Generaci√≥n de gr√°ficas y visualizaciones"),
        ("üéØ MenuController", "Control de navegaci√≥n y men√∫s interactivos"),
        ("üìÑ PDFCreator", "Generaci√≥n de reportes PDF profesionales")
    ]
    
    for nombre, descripcion in modulos:
        print(f"   {nombre:<20} - {descripcion}")
    
    print("\nüíæ FUNCIONALIDADES PRINCIPALES:")
    funciones = [
        "üì¶ Gesti√≥n completa de inventario de materiales",
        "‚õΩ Control de stock de combustibles (Gasolina/Diesel)",
        "üèóÔ∏è Registro y seguimiento de equipos",
        "üìà Generaci√≥n autom√°tica de gr√°ficas estad√≠sticas", 
        "üìÑ Reportes PDF con formato profesional",
        "üìã Consultas y an√°lisis de datos",
        "üîß Mantenimiento de archivos y base de datos"
    ]
    
    for funcion in funciones:
        print(f"   {funcion}")
    
    print("="*70)

def ejecutar_modo_interactivo():
    """Ejecuta el sistema en modo interactivo"""
    print("\nüöÄ === INICIANDO MODO INTERACTIVO ===")
    
    # Verificar m√≥dulos
    modulos_ok, modulos = verificar_modulos()
    if not modulos_ok:
        print("‚ùå No se puede ejecutar - faltan m√≥dulos")
        return
    
    ExcelManager, GraphicsGenerator, MenuController, PDFCreator = modulos
    
    # Verificar y crear archivos Excel si no existen
    print("üìä Verificando archivos de datos...")
    ExcelManager.verificar_y_crear_archivos()
    
    # Ejecutar aplicaci√≥n principal
    print("üéØ Iniciando aplicaci√≥n principal...")
    MenuController.ejecutar_aplicacion()

def ejecutar_modo_prueba():
    """Ejecuta el sistema en modo de prueba"""
    print("\nüß™ === MODO DE PRUEBA ===")
    
    # Verificar m√≥dulos
    modulos_ok, modulos = verificar_modulos()
    if not modulos_ok:
        print("‚ùå No se puede ejecutar - faltan m√≥dulos")
        return
    
    ExcelManager, GraphicsGenerator, MenuController, PDFCreator = modulos
    
    print("üìä Verificando ExcelManager...")
    ExcelManager.verificar_y_crear_archivos()
    
    # Agregar datos de prueba
    fecha_hoy = datetime.now().strftime("%d/%m/%Y")
    hora_actual = datetime.now().strftime("%H:%M:%S")
    
    print("üìù Agregando datos de prueba...")
    ExcelManager.guardar_material(fecha_hoy, hora_actual, "Cemento", "Proveedor Prueba", "üìà Entrada", 100.0, "Datos de prueba")
    ExcelManager.guardar_material(fecha_hoy, hora_actual, "Gasolina", "Estaci√≥n Central", "üìà Entrada", 200.0, "Abastecimiento prueba")
    ExcelManager.guardar_material(fecha_hoy, hora_actual, "Diesel", "Estaci√≥n Norte", "üìà Entrada", 150.0, "Abastecimiento prueba")
    ExcelManager.guardar_material(fecha_hoy, hora_actual, "Gasolina", "Maquinaria", "üìâ Salida", 25.0, "Consumo diario")
    ExcelManager.guardar_material(fecha_hoy, hora_actual, "Diesel", "Veh√≠culos", "üìâ Salida", 40.0, "Transporte")
    
    print("üìà Probando generaci√≥n de gr√°ficas...")
    grafica_combustibles = GraphicsGenerator.generar_grafica_combustibles()
    if grafica_combustibles:
        print(f"‚úÖ Gr√°fica de combustibles: {grafica_combustibles}")
    
    grafica_stock = GraphicsGenerator.generar_grafica_stock_materiales()
    if grafica_stock:
        print(f"‚úÖ Gr√°fica de stock: {grafica_stock}")
    
    from modules.pdf_creator import validar_reportlab
    if validar_reportlab():
        print("üìÑ Probando generaci√≥n de PDF...")
        try:
            pdf_materiales = PDFCreator.generar_pdf_materiales()
            if pdf_materiales:
                print(f"‚úÖ PDF de materiales: {pdf_materiales}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error en PDFs: {e}")
    else:
        print("‚ö†Ô∏è ReportLab no disponible - PDFs omitidos")
    
    print("\nüéØ === PRUEBA COMPLETADA ===")
    print("‚úÖ Todos los m√≥dulos funcionan correctamente")
    print("üí° Ejecuta sin argumentos para modo interactivo")

def ejecutar_demo_rapido():
    """Ejecuta una demostraci√≥n r√°pida del sistema"""
    print("\nüé¨ === DEMOSTRACI√ìN R√ÅPIDA ===")
    
    # Verificar m√≥dulos
    modulos_ok, modulos = verificar_modulos()
    if not modulos_ok:
        print("‚ùå No se puede ejecutar - faltan m√≥dulos")
        return
    
    ExcelManager, GraphicsGenerator, MenuController, PDFCreator = modulos
    
    # 1. Crear archivos
    print("1Ô∏è‚É£ Creando estructura de archivos...")
    ExcelManager.verificar_y_crear_archivos()
    
    # 2. Agregar datos de ejemplo
    print("2Ô∏è‚É£ Agregando datos de ejemplo...")
    fecha = datetime.now().strftime("%d/%m/%Y")
    hora = datetime.now().strftime("%H:%M:%S")
    
    materiales_ejemplo = [
        ("Cemento", "üìà Entrada", 250.0, "Compra mensual"),
        ("Arena", "üìà Entrada", 180.0, "Abastecimiento"),
        ("Gasolina", "üìà Entrada", 300.0, "Tanque lleno"),
        ("Diesel", "üìà Entrada", 400.0, "Abastecimiento semanal"),
        ("Cemento", "üìâ Salida", 45.0, "Producci√≥n adoquines"),
        ("Gasolina", "üìâ Salida", 35.0, "Maquinaria"),
        ("Diesel", "üìâ Salida", 60.0, "Veh√≠culos")
    ]
    
    for material, tipo, cantidad, obs in materiales_ejemplo:
        ExcelManager.guardar_material(fecha, hora, material, "Demo", tipo, cantidad, obs)
    
    # 3. Mostrar stock
    print("3Ô∏è‚É£ Stock actual:")
    stock = ExcelManager.obtener_stock_materiales()
    for material, cantidad in stock.items():
        print(f"   üì¶ {material}: {cantidad:.1f}")
    
    # 4. Generar gr√°ficas
    print("4Ô∏è‚É£ Generando gr√°ficas...")
    grafica1 = GraphicsGenerator.generar_grafica_combustibles()
    grafica2 = GraphicsGenerator.generar_grafica_stock_materiales()
    
    if grafica1:
        print(f"   üìà Gr√°fica combustibles: {grafica1}")
    if grafica2:
        print(f"   üìä Gr√°fica stock: {grafica2}")
    
    # 5. Generar reporte
    print("5Ô∏è‚É£ Generando reporte...")
    from modules.pdf_creator import validar_reportlab, generar_reporte_simple
    
    reporte = generar_reporte_simple()
    if reporte:
        print(f"   üìÑ Reporte: {reporte}")
    
    print("\nüéâ === DEMOSTRACI√ìN COMPLETADA ===")
    print("‚úÖ Sistema funcionando correctamente")
    print("üöÄ Usa 'python main_modular.py' para modo interactivo")

def mostrar_ayuda():
    """Muestra la ayuda del sistema"""
    print("\nüìñ === AYUDA DEL SISTEMA ===")
    print("\nUSO:")
    print("   python main_modular.py [opci√≥n]")
    print("\nOPCIONES:")
    print("   (sin argumentos)  - Ejecutar modo interactivo")
    print("   --test           - Ejecutar modo de prueba")
    print("   --demo           - Ejecutar demostraci√≥n r√°pida")
    print("   --info           - Mostrar informaci√≥n del sistema")
    print("   --deps           - Verificar dependencias")
    print("   --help           - Mostrar esta ayuda")
    print("\nEJEMPLOS:")
    print("   python main_modular.py")
    print("   python main_modular.py --test")
    print("   python main_modular.py --demo")
    print("   python main_modular.py --info")

def main():
    """Funci√≥n principal del sistema"""
    # Mostrar informaci√≥n b√°sica
    print("üè≠ Sistema Industrial Unificado - Planta Premoldeados Tupiza")
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Procesar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        argumento = sys.argv[1].lower()
        
        if argumento in ['--help', '-h', 'help']:
            mostrar_ayuda()
        elif argumento in ['--info', 'info']:
            mostrar_informacion_sistema()
        elif argumento in ['--deps', 'deps', '--dependencies']:
            verificar_dependencias()
        elif argumento in ['--test', 'test']:
            verificar_dependencias()
            ejecutar_modo_prueba()
        elif argumento in ['--demo', 'demo']:
            verificar_dependencias()
            ejecutar_demo_rapido()
        else:
            print(f"‚ùå Argumento no reconocido: {argumento}")
            mostrar_ayuda()
    else:
        # Modo interactivo por defecto
        print("üîÑ Verificando sistema...")
        dependencias_ok = verificar_dependencias()
        
        if not dependencias_ok:
            print("\n‚ö†Ô∏è Algunas dependencias faltan, pero el sistema puede funcionar")
            print("üí° Instala las dependencias faltantes para funcionalidad completa")
            respuesta = input("\n¬øContinuar de todas formas? (s/N): ").strip().lower()
            if respuesta not in ['s', 'si', 's√≠', 'y', 'yes']:
                print("üö™ Saliendo...")
                return
        
        ejecutar_modo_interactivo()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Programa interrumpido por el usuario")
        print("üö™ Saliendo del sistema...")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üí° Ejecuta con --help para obtener ayuda")
    finally:
        print(f"\nüìÖ Finalizado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("‚úÖ Gracias por usar el Sistema Industrial Unificado")

# ============================================================================
# INFORMACI√ìN ADICIONAL
# ============================================================================

"""
üéØ ESTRUCTURA DEL PROYECTO:

proyecto/
‚îú‚îÄ‚îÄ main_modular.py          # ‚Üê Este archivo (aplicaci√≥n principal)
‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py          # Archivo vac√≠o para Python
‚îÇ   ‚îú‚îÄ‚îÄ config.py            # Configuraci√≥n general
‚îÇ   ‚îú‚îÄ‚îÄ excel_manager.py     # Gesti√≥n de archivos Excel
‚îÇ   ‚îú‚îÄ‚îÄ graphics_generator.py # Generaci√≥n de gr√°ficas
‚îÇ   ‚îú‚îÄ‚îÄ menu_controller.py   # Control de men√∫s
‚îÇ   ‚îî‚îÄ‚îÄ pdf_creator.py       # Generaci√≥n de PDFs
‚îú‚îÄ‚îÄ datos/                   # Archivos de datos (se crean autom√°ticamente)
‚îÇ   ‚îú‚îÄ‚îÄ inventario_materiales.xlsx
‚îÇ   ‚îú‚îÄ‚îÄ inventario_equipos.xlsx
‚îÇ   ‚îî‚îÄ‚îÄ registro_produccion.xlsx
‚îú‚îÄ‚îÄ graficas/                # Gr√°ficas generadas (se crea autom√°ticamente)
‚îî‚îÄ‚îÄ reportes/                # Reportes PDF (se crea autom√°ticamente)

üìã INSTALACI√ìN DE DEPENDENCIAS:
pip install openpyxl matplotlib reportlab

üöÄ FORMAS DE EJECUTAR:
1. Modo interactivo: python main_modular.py
2. Modo prueba: python main_modular.py --test
3. Demostraci√≥n: python main_modular.py --demo
4. Ver informaci√≥n: python main_modular.py --info
5. Verificar dependencias: python main_modular.py --deps

üéØ CARACTER√çSTICAS:
‚úÖ Arquitectura modular limpia
‚úÖ Gesti√≥n completa de inventarios
‚úÖ Generaci√≥n autom√°tica de gr√°ficas
‚úÖ Reportes PDF profesionales
‚úÖ Interfaz de l√≠nea de comandos intuitiva
‚úÖ Sistema de verificaci√≥n autom√°tica
‚úÖ Manejo robusto de errores
‚úÖ Documentaci√≥n integrada
"""