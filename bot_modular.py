#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üè≠ BOT MODULAR UNIFICADO - PLANTA TUPIZA
========================================

Bot principal que usa el sistema modular para organizar el c√≥digo.
Todas las funciones del bot unificado pero organizadas en m√≥dulos separados.

Estructura:
- bot_modular.py (este archivo) ‚Üí Bot principal de Telegram
- modules/excel_manager.py ‚Üí Gesti√≥n de archivos Excel
- modules/graphics_generator.py ‚Üí Generaci√≥n de gr√°ficas
- modules/menu_controller.py ‚Üí Control de men√∫s
- modules/pdf_creator.py ‚Üí Generaci√≥n de PDFs

Autor: Sistema Industrial Automatizado
Versi√≥n: 1.0 MODULAR
Fecha: 2025
"""

import os
import sys
import json
from datetime import datetime
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
import logging
from PIL import Image

# =============================================================================
# IMPORTAR M√ìDULOS DEL SISTEMA
# =============================================================================

print("üîÑ Cargando sistema modular...")

try:
    # Verificar que existe la carpeta modules
    if not os.path.exists('modules'):
        print("‚ùå ERROR: No se encuentra la carpeta 'modules'")
        print("üí° Crea la carpeta 'modules' y coloca los archivos de m√≥dulos ah√≠")
        sys.exit(1)
    
    # Importar m√≥dulos del sistema
    from modules.config import *
    from modules.excel_manager import ExcelManager
    from modules.graphics_generator import GraphicsGenerator
    from modules.menu_controller import MenuController
    from modules.pdf_creator import PDFCreator, validar_reportlab
    
    print("‚úÖ Todos los m√≥dulos cargados correctamente")
    
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("\nüí° SOLUCIONES:")
    print("1. Verifica que todos los archivos est√©n en modules/:")
    print("   - modules/__init__.py")
    print("   - modules/config.py")
    print("   - modules/excel_manager.py")
    print("   - modules/graphics_generator.py")
    print("   - modules/menu_controller.py")
    print("   - modules/pdf_creator.py")
    print("2. Ejecuta desde la carpeta que contiene modules/")
    sys.exit(1)

# =============================================================================
# CONFIGURACI√ìN DEL BOT (de config.py + constantes adicionales)
# =============================================================================

# El token se obtiene desde modules.config (variable de entorno BOT_TOKEN)

# Constantes adicionales (en caso de que no est√©n en config.py)
try:
    # Intentar usar las de config.py
    test_carpeta = CARPETA_FOTOS
    test_estados = ARCHIVO_ESTADOS_USUARIO
except NameError:
    # Si no est√°n definidas, definirlas aqu√≠
    print("‚ö†Ô∏è Definiendo constantes faltantes...")
    CARPETA_FOTOS = "fotos_planta"
    ARCHIVO_ESTADOS_USUARIO = "estados_usuario.json"
    ARCHIVO_ESTADOS_PRODUCCION = "estados_produccion.json"
    MATERIALES = ["Cemento", "Arena", "Gasolina", "Diesel", "Alambre", "Acero", "Pintura", "Grasa"]
    EQUIPOS = ["M√°quina de Soldar", "Carretilla", "Martillo", "Mezcladora", "Taladro", "Compresora", "Gr√∫a"]
    print("‚úÖ Constantes definidas correctamente")

# Estados de conversaci√≥n (mismos del bot original)
ESPERANDO_MATERIAL = "esperando_material"
ESPERANDO_EQUIPO = "esperando_equipo" 
ESPERANDO_MOVIMIENTO = "esperando_movimiento"
ESPERANDO_CANTIDAD = "esperando_cantidad"
ESPERANDO_CONDICION = "esperando_condicion"
ESPERANDO_OBSERVACIONES = "esperando_observaciones"
ESPERANDO_CANTIDAD_PRODUCCION = "esperando_cantidad_produccion"
ESPERANDO_ACTIVIDAD = "esperando_actividad"
ESPERANDO_FECHA_REPORTE = "esperando_fecha_reporte"

# Variables globales para estados
estados_usuario = {}
estados_produccion = {}

# Configuraci√≥n de logging
logging.basicConfig(level=logging.WARNING)

# =============================================================================
# FUNCIONES DE ESTADOS (del bot original)
# =============================================================================

def cargar_estados_usuario():
    """Carga estados de usuario desde archivo"""
    global estados_usuario
    try:
        if os.path.exists(ARCHIVO_ESTADOS_USUARIO):
            with open(ARCHIVO_ESTADOS_USUARIO, 'r', encoding='utf-8') as f:
                estados_usuario = json.load(f)
    except:
        estados_usuario = {}

def guardar_estados_usuario(estados):
    """Guarda estados de usuario en archivo"""
    try:
        with open(ARCHIVO_ESTADOS_USUARIO, 'w', encoding='utf-8') as f:
            json.dump(estados, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error guardando estados usuario: {e}")

def cargar_estados_produccion():
    """Carga estados de producci√≥n desde archivo"""
    global estados_produccion
    try:
        if os.path.exists(ARCHIVO_ESTADOS_PRODUCCION):
            with open(ARCHIVO_ESTADOS_PRODUCCION, 'r', encoding='utf-8') as f:
                estados_produccion = json.load(f)
    except:
        estados_produccion = {}

def guardar_estados_produccion(estados):
    """Guarda estados de producci√≥n en archivo"""
    try:
        with open(ARCHIVO_ESTADOS_PRODUCCION, 'w', encoding='utf-8') as f:
            json.dump(estados, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error guardando estados producci√≥n: {e}")

# =============================================================================
# FUNCI√ìN DE CREACI√ìN DE CARPETAS
# =============================================================================

def crear_carpeta_fotos():
    """Crea carpeta para guardar fotos si no existe y carpeta del d√≠a"""
    if not os.path.exists(CARPETA_FOTOS):
        os.makedirs(CARPETA_FOTOS)
        print(f"üìÅ Carpeta creada: {CARPETA_FOTOS}")
    
    # Crear carpeta del d√≠a actual
    fecha_hoy = datetime.now().strftime("%Y-%m-%d")
    carpeta_dia = os.path.join(CARPETA_FOTOS, fecha_hoy)
    if not os.path.exists(carpeta_dia):
        os.makedirs(carpeta_dia)
        print(f"üìÖ Carpeta del d√≠a creada: {carpeta_dia}")
    
    return carpeta_dia

# =============================================================================
# FUNCIONES DE MEN√öS USANDO MenuController
# =============================================================================

def crear_menu_principal():
    """Crea el men√∫ principal usando MenuController"""
    return MenuController.crear_menu_principal()

def crear_teclado_materiales():
    """Crea teclado de materiales usando MenuController"""
    return MenuController.crear_teclado_materiales()

def crear_teclado_movimientos():
    """Crea teclado de movimientos usando MenuController"""
    return MenuController.crear_teclado_movimientos()

# =============================================================================
# FUNCIONES DE DATOS DE EJEMPLO
# =============================================================================

def agregar_datos_ejemplo():
    """Agrega datos de ejemplo usando ExcelManager"""
    try:
        fecha_hoy = datetime.now().strftime("%d/%m/%Y")
        hora_actual = datetime.now().strftime("%H:%M:%S")
        
        # Verificar y crear archivos
        ExcelManager.verificar_y_crear_archivos()
        
        # Datos de ejemplo para materiales (combustibles)
        datos_materiales = [
            # Entradas de combustibles
            (fecha_hoy, hora_actual, "Gasolina", "Sistema", "üìà Entrada", 150.0, "Abastecimiento inicial"),
            (fecha_hoy, hora_actual, "Diesel", "Sistema", "üìà Entrada", 200.0, "Abastecimiento inicial"),
            (fecha_hoy, hora_actual, "Cemento", "Sistema", "üìà Entrada", 50.0, "Compra mensual"),
            (fecha_hoy, hora_actual, "Arena", "Sistema", "üìà Entrada", 25.0, "Stock inicial"),
            # Algunas salidas
            (fecha_hoy, hora_actual, "Gasolina", "Sistema", "üìâ Salida", 30.0, "Consumo maquinaria"),
            (fecha_hoy, hora_actual, "Diesel", "Sistema", "üìâ Salida", 45.0, "Consumo equipos"),
            (fecha_hoy, hora_actual, "Cemento", "Sistema", "üìâ Salida", 15.0, "Producci√≥n adoquines"),
        ]
        
        # Usar ExcelManager para guardar datos
        for fecha, hora, material, proveedor, tipo, cantidad, obs in datos_materiales:
            ExcelManager.guardar_material(fecha, hora, material, proveedor, tipo, cantidad, obs)
        
        print("‚úÖ Datos de ejemplo agregados exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error agregando datos de ejemplo: {e}")
        return False

# =============================================================================
# COMANDO PRINCIPAL /start
# =============================================================================

async def comando_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando inicial del bot modular"""
    user_id = str(update.message.from_user.id)
    
    global estados_usuario, estados_produccion
    
    # Limpiar estados usando las funciones modulares
    if user_id in estados_usuario:
        del estados_usuario[user_id]
    if user_id in estados_produccion:
        del estados_produccion[user_id]
    
    guardar_estados_usuario(estados_usuario)
    guardar_estados_produccion(estados_produccion)
    
    mensaje_bienvenida = f"""üè≠ **BOT MODULAR UNIFICADO - PLANTA TUPIZA**
*Sistema Organizado en M√≥dulos Especializados*

‚úÖ **ARQUITECTURA MODULAR:**
üìä ExcelManager - Gesti√≥n de datos Excel
üìà GraphicsGenerator - Gr√°ficas profesionales  
üéØ MenuController - Navegaci√≥n intuitiva
üìÑ PDFCreator - Reportes ejecutivos

‚úÖ **FUNCIONES EJECUTIVAS DISPONIBLES:**

üìä **GR√ÅFICAS ANAL√çTICAS:**
‚Ä¢ Gr√°fica de Stock de Materiales
‚Ä¢ Gr√°fica de Combustibles (Gasolina/Diesel)
‚Ä¢ Gr√°fica de Consumo de Cemento
‚Ä¢ Gr√°fica de Producci√≥n de Adoquines

üìã **REPORTES EJECUTIVOS:**
‚Ä¢ Reporte completo con todas las gr√°ficas
‚Ä¢ Reportes de cualquier fecha espec√≠fica
‚Ä¢ Reportes fotogr√°ficos con im√°genes reales

üìù **REGISTRO DE OPERACIONES:**
‚Ä¢ Materiales, equipos, actividades y producci√≥n
‚Ä¢ Todo se guarda autom√°ticamente

üéØ **SISTEMA MODULAR:**
C√≥digo organizado, mantenible y escalable

¬°Presiona cualquier bot√≥n para comenzar!"""
    
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=mensaje_bienvenida,
        reply_markup=crear_menu_principal(),
        parse_mode='Markdown'
    )

# =============================================================================
# HANDLERS DE GR√ÅFICAS USANDO GraphicsGenerator
# =============================================================================

async def generar_grafica_cemento_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para gr√°fica de cemento usando GraphicsGenerator"""
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üìä Generando gr√°fica de consumo de cemento..."
    )
    
    archivo_grafica = GraphicsGenerator.generar_grafica_cemento()
    
    if archivo_grafica and os.path.exists(archivo_grafica):
        try:
            with open(archivo_grafica, 'rb') as img_file:
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=img_file,
                    caption="‚úÖ **GR√ÅFICA DE CONSUMO DE CEMENTO**\n\n"
                           "üìä Generada con GraphicsGenerator\n"
                           "üìà Sistema modular - M√≥dulo de gr√°ficas\n"
                           "üè≠ Planta Municipal de Premoldeados - Tupiza",
                    parse_mode='Markdown'
                )
            os.remove(archivo_grafica)
        except Exception as e:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå Error enviando gr√°fica: {e}"
            )
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå No hay datos suficientes de cemento para generar la gr√°fica.\n\n"
                 "üí° Registra algunos movimientos de cemento usando 'Registrar Material'."
        )

async def generar_grafica_combustibles_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para gr√°fica de combustibles usando GraphicsGenerator"""
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="‚õΩ Generando gr√°fica de combustibles con an√°lisis detallado..."
    )
    
    archivo_grafica = GraphicsGenerator.generar_grafica_combustibles()
    
    if archivo_grafica and os.path.exists(archivo_grafica):
        try:
            # Obtener informaci√≥n detallada usando ExcelManager
            info_combustibles = ExcelManager.obtener_datos_combustibles()
            
            with open(archivo_grafica, 'rb') as img_file:
                mensaje_detallado = "‚úÖ **AN√ÅLISIS DE COMBUSTIBLES**\n\n"
                mensaje_detallado += "üìä **Generado con GraphicsGenerator**\n"
                mensaje_detallado += "üìã **Datos procesados con ExcelManager**\n\n"
                
                if info_combustibles:
                    gasolina = info_combustibles.get('gasolina', 0)
                    diesel = info_combustibles.get('diesel', 0)
                    
                    mensaje_detallado += "‚õΩ **ESTADO ACTUAL:**\n"
                    mensaje_detallado += f"‚Ä¢ **Gasolina**: {gasolina:.1f} litros\n"
                    mensaje_detallado += f"‚Ä¢ **Diesel**: {diesel:.1f} litros\n\n"
                
                mensaje_detallado += "üéØ **Sistema Modular en Funcionamiento**\n"
                mensaje_detallado += "üè≠ Planta Municipal de Premoldeados - Tupiza"
                
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=img_file,
                    caption=mensaje_detallado,
                    parse_mode='Markdown'
                )
            os.remove(archivo_grafica)
        except Exception as e:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå Error enviando gr√°fica: {e}"
            )
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå No se pudo generar la gr√°fica de combustibles.\n\n"
                 "üí° Registra algunos movimientos de gasolina o diesel primero."
        )

async def generar_grafica_stock_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para gr√°fica de stock usando GraphicsGenerator"""
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üìà Generando gr√°fica de stock con GraphicsGenerator..."
    )
    
    archivo_grafica = GraphicsGenerator.generar_grafica_stock_materiales()
    
    if archivo_grafica and os.path.exists(archivo_grafica):
        try:
            # Obtener informaci√≥n de stock usando ExcelManager
            stock_info = ExcelManager.obtener_stock_materiales()
            
            with open(archivo_grafica, 'rb') as img_file:
                mensaje_detallado = "‚úÖ **GR√ÅFICA DE STOCK DE MATERIALES**\n\n"
                mensaje_detallado += "üìä **Generada con GraphicsGenerator**\n"
                mensaje_detallado += "üìã **C√°lculos realizados con ExcelManager**\n\n"
                
                if stock_info:
                    mensaje_detallado += f"üìà **RESUMEN:**\n"
                    mensaje_detallado += f"‚Ä¢ Total de materiales: {len(stock_info)}\n"
                    mensaje_detallado += f"‚Ä¢ Stock total: {sum(stock_info.values()):.1f} unidades\n\n"
                
                mensaje_detallado += "üéØ **Arquitectura Modular Funcionando**\n"
                mensaje_detallado += "üè≠ Planta Municipal de Premoldeados - Tupiza"
                
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=img_file,
                    caption=mensaje_detallado,
                    parse_mode='Markdown'
                )
            os.remove(archivo_grafica)
        except Exception as e:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå Error enviando gr√°fica: {e}"
            )
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå No hay datos suficientes para generar la gr√°fica de stock.\n\n"
                 "üí° Registra algunos materiales usando 'Registrar Material'."
        )

# =============================================================================
# HANDLERS DE PDFs USANDO PDFCreator
# =============================================================================

async def generar_reporte_ejecutivo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para reporte ejecutivo usando PDFCreator"""
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üìã **GENERANDO REPORTE EJECUTIVO MODULAR**\n\n"
             "‚è≥ Usando PDFCreator para generar documento...\n"
             "üìä GraphicsGenerator creando gr√°ficas...\n"
             "üìã ExcelManager procesando datos...\n\n"
             "Este proceso puede tardar 1-2 minutos..."
    )
    
    try:
        # Verificar que PDFCreator est√© disponible
        if not validar_reportlab():
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå **PDF NO DISPONIBLE**\n\n"
                     "ReportLab no est√° instalado.\n"
                     "üí° Instala con: pip install reportlab"
            )
            return
        
        # Generar PDF usando PDFCreator
        archivo_pdf = PDFCreator.generar_pdf_materiales()
        
        if archivo_pdf and os.path.exists(archivo_pdf):
            # Obtener estad√≠sticas usando ExcelManager
            total_registros = ExcelManager.contar_registros_materiales()
            stock_actual = ExcelManager.obtener_stock_materiales()
            
            mensaje_resultado = "‚úÖ **REPORTE EJECUTIVO GENERADO EXITOSAMENTE**\n\n"
            mensaje_resultado += "üéØ **SISTEMA MODULAR EN ACCI√ìN:**\n"
            mensaje_resultado += "üìÑ PDFCreator - Generaci√≥n de documento\n"
            mensaje_resultado += "üìä ExcelManager - Procesamiento de datos\n"
            mensaje_resultado += "üìà GraphicsGenerator - Gr√°ficas incluidas\n\n"
            
            mensaje_resultado += "üìä **CONTENIDO DEL REPORTE:**\n"
            mensaje_resultado += f"‚Ä¢ Registros procesados: {total_registros}\n"
            mensaje_resultado += f"‚Ä¢ Materiales monitoreados: {len(stock_actual) if stock_actual else 0}\n"
            mensaje_resultado += f"‚Ä¢ Encabezado institucional: ‚úÖ\n"
            mensaje_resultado += f"‚Ä¢ An√°lisis de stock: ‚úÖ\n\n"
            
            mensaje_resultado += "üéØ **ARQUITECTURA MODULAR FUNCIONANDO**"
            
            with open(archivo_pdf, 'rb') as pdf_file:
                await context.bot.send_document(
                    chat_id=update.message.chat_id,
                    document=pdf_file,
                    filename=archivo_pdf,
                    caption=mensaje_resultado,
                    parse_mode='Markdown'
                )
            os.remove(archivo_pdf)
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå **NO SE PUDO GENERAR EL REPORTE**\n\n"
                     "Posibles causas:\n"
                     "‚Ä¢ Faltan datos en el sistema\n"
                     "‚Ä¢ Error en alg√∫n m√≥dulo\n"
                     "‚Ä¢ Problema de permisos de archivos"
            )
            
    except Exception as e:
        print(f"Error en reporte ejecutivo: {e}")
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=f"‚ùå **ERROR INESPERADO**\n\n"
                 f"Error en el sistema modular: {str(e)}\n\n"
                 f"üí° Verifica que todos los m√≥dulos est√©n correctos.",
            parse_mode='Markdown'
        )

# =============================================================================
# HANDLERS DE REGISTRO USANDO ExcelManager
# =============================================================================

async def registrar_material_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para registrar material usando ExcelManager"""
    user_id = str(update.message.from_user.id)
    estados_usuario[user_id] = {"estado": ESPERANDO_MATERIAL}
    guardar_estados_usuario(estados_usuario)
    
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üì¶ **REGISTRO DE MATERIAL**\n"
             "üéØ *Usando ExcelManager para guardar datos*\n\n"
             "Selecciona el material:",
        reply_markup=crear_teclado_materiales(),
        parse_mode='Markdown'
    )

async def registrar_actividad_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para registrar actividad usando ExcelManager"""
    user_id = str(update.message.from_user.id)
    estados_usuario[user_id] = {"estado": ESPERANDO_ACTIVIDAD}
    guardar_estados_usuario(estados_usuario)
    
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üìù **REGISTRO DE ACTIVIDAD**\n"
             "üéØ *Usando ExcelManager para almacenar*\n\n"
             "Escribe la descripci√≥n de la actividad:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå Cancelar")]], resize_keyboard=True),
        parse_mode='Markdown'
    )

# =============================================================================
# HANDLER DE DATOS DE EJEMPLO
# =============================================================================

async def agregar_datos_ejemplo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para agregar datos de ejemplo usando ExcelManager"""
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="üìù **AGREGAR DATOS DE EJEMPLO**\n"
             "üéØ *Sistema Modular*\n\n"
             "¬øQuieres que agregue datos de ejemplo para probar las gr√°ficas?\n\n"
             "Esto usar√° **ExcelManager** para crear:\n"
             "‚Ä¢ Movimientos de gasolina y diesel\n"
             "‚Ä¢ Algunos materiales (cemento, arena, etc.)\n"
             "‚Ä¢ Registros de actividades\n\n"
             "**Nota:** Solo para demostrar el funcionamiento modular.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("‚úÖ S√≠, agregar datos ejemplo")],
            [KeyboardButton("‚ùå No, cancelar")],
            [KeyboardButton("üîô Volver al men√∫")]
        ], resize_keyboard=True),
        parse_mode='Markdown'
    )

# =============================================================================
# HANDLER PRINCIPAL DE MENSAJES
# =============================================================================

async def manejar_mensaje(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler principal que maneja todos los mensajes usando los m√≥dulos"""
    mensaje = update.message.text
    user_id = str(update.message.from_user.id)
    
    # Cargar estados
    cargar_estados_usuario()
    cargar_estados_produccion()
    
    # Comandos del men√∫ principal
    if mensaje == "üì¶ Registrar Material":
        await registrar_material_handler(update, context)
    elif mensaje == "üîß Registrar Equipo":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üîß **REGISTRO DE EQUIPOS**\n"
                 "üéØ *Funci√≥n disponible en el sistema modular*\n\n"
                 "Usar√≠a ExcelManager para guardar datos de equipos.",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
    elif mensaje == "üìù Registrar Actividad":
        await registrar_actividad_handler(update, context)
    elif mensaje == "üè≠ Registrar Producci√≥n":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üè≠ **REGISTRO DE PRODUCCI√ìN**\n"
                 "üéØ *Funci√≥n disponible en el sistema modular*\n\n"
                 "Usar√≠a ExcelManager para guardar datos de producci√≥n.",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
    elif mensaje == "üìä Gr√°fica Cemento":
        await generar_grafica_cemento_handler(update, context)
    elif mensaje == "‚õΩ Gr√°fica Combustibles":
        await generar_grafica_combustibles_handler(update, context)
    elif mensaje == "üìà Gr√°fica Stock":
        await generar_grafica_stock_handler(update, context)
    elif mensaje == "üìâ Gr√°fica Producci√≥n":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üìâ **GR√ÅFICA DE PRODUCCI√ìN**\n"
                 "üéØ *Usando GraphicsGenerator*\n\n"
                 "Funci√≥n disponible en el sistema modular.",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
    elif mensaje == "üìã Reporte Ejecutivo":
        await generar_reporte_ejecutivo_handler(update, context)
    elif mensaje == "üìÖ Reporte por Fecha":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üìÖ **REPORTE POR FECHA**\n"
                 "üéØ *Usando PDFCreator*\n\n"
                 "Funci√≥n disponible en el sistema modular.",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
    elif mensaje == "üì∏ Reporte con Fotos":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üì∏ **REPORTE FOTOGR√ÅFICO**\n"
                 "üéØ *Usando PDFCreator*\n\n"
                 "Funci√≥n disponible en el sistema modular.",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
    elif mensaje == "üìù Datos de Ejemplo":
        await agregar_datos_ejemplo_handler(update, context)
    elif mensaje == "‚úÖ S√≠, agregar datos ejemplo":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üìù Agregando datos de ejemplo usando **ExcelManager**..."
        )
        
        exito = agregar_datos_ejemplo()
        
        if exito:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚úÖ **DATOS DE EJEMPLO AGREGADOS**\n"
                     "üéØ *Sistema Modular Exitoso*\n\n"
                     "**ExcelManager** agreg√≥:\n"
                     "‚õΩ Combustibles con stock calculado\n"
                     "üì¶ Materiales diversos\n"
                     "üìä Datos listos para gr√°ficas\n\n"
                     "üéØ **Ahora puedes probar:**\n"
                     "‚Ä¢ ‚õΩ Gr√°fica Combustibles (GraphicsGenerator)\n"
                     "‚Ä¢ üìà Gr√°fica Stock (GraphicsGenerator)\n"
                     "‚Ä¢ üìä Gr√°fica Cemento (GraphicsGenerator)\n"
                     "‚Ä¢ üìã Reporte Ejecutivo (PDFCreator)",
                reply_markup=crear_menu_principal(),
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå Error agregando datos de ejemplo.\n"
                     "Revisa que ExcelManager est√© funcionando correctamente.",
                reply_markup=crear_menu_principal()
            )
    elif mensaje == "üîô Volver al men√∫":
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="üîô Regresando al men√∫ principal del sistema modular...",
            reply_markup=crear_menu_principal()
        )
    elif mensaje == "üìã Estado del Bot":
        # Verificar estado de todos los m√≥dulos
        estado_modulos = {
            'ExcelManager': True,
            'GraphicsGenerator': True,
            'MenuController': True,
            'PDFCreator': validar_reportlab()
        }
        
        estado = f"""üìã **ESTADO DEL BOT MODULAR**

‚úÖ **Sistema:** Arquitectura Modular Operativa
üìÖ **Fecha:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
üè≠ **Planta:** Municipal de Premoldeados - Tupiza

üéØ **M√ìDULOS DEL SISTEMA:**
‚Ä¢ üìä ExcelManager: {'‚úÖ Activo' if estado_modulos['ExcelManager'] else '‚ùå Error'}
‚Ä¢ üìà GraphicsGenerator: {'‚úÖ Activo' if estado_modulos['GraphicsGenerator'] else '‚ùå Error'}  
‚Ä¢ üéØ MenuController: {'‚úÖ Activo' if estado_modulos['MenuController'] else '‚ùå Error'}
‚Ä¢ üìÑ PDFCreator: {'‚úÖ Activo' if estado_modulos['PDFCreator'] else '‚ùå Error'}

üìä **FUNCIONES MODULARES:**
‚Ä¢ Gr√°ficas especializadas por m√≥dulo
‚Ä¢ PDFs con encabezado institucional
‚Ä¢ Gesti√≥n de datos centralizada
‚Ä¢ Navegaci√≥n intuitiva

üéØ **VENTAJAS DEL SISTEMA MODULAR:**
‚Ä¢ C√≥digo organizado y mantenible
‚Ä¢ F√°cil agregar nuevas funciones
‚Ä¢ M√≥dulos independientes y reutilizables"""
        
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=estado,
            parse_mode='Markdown'
        )
    elif mensaje == "‚ùå Cancelar":
        # Cancelar cualquier operaci√≥n en curso
        if user_id in estados_usuario:
            del estados_usuario[user_id]
        if user_id in estados_produccion:
            del estados_produccion[user_id]
        
        guardar_estados_usuario(estados_usuario)
        guardar_estados_produccion(estados_produccion)
        
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚úÖ Operaci√≥n cancelada.\n"
                 "üéØ Sistema modular listo para nuevas tareas.",
            reply_markup=crear_menu_principal()
        )
    else:
        # Procesar estados de conversaci√≥n usando ExcelManager
        if user_id in estados_usuario:
            await procesar_estados_usuario(update, context, user_id)
        else:
            # Mensaje por defecto
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="ü§ñ **Sistema Modular Activo**\n\n"
                     "Usa los botones del men√∫ para acceder a las funciones.\n"
                     "üéØ Cada funci√≥n usa m√≥dulos especializados.",
                reply_markup=crear_menu_principal(),
                parse_mode='Markdown'
            )

# =============================================================================
# PROCESAR ESTADOS DE CONVERSACI√ìN
# =============================================================================

async def procesar_estados_usuario(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
    """Procesa los estados de conversaci√≥n usando ExcelManager"""
    mensaje = update.message.text
    estado = estados_usuario[user_id]
    
    if estado["estado"] == ESPERANDO_MATERIAL:
        if mensaje in MATERIALES:
            estado["material"] = mensaje
            estado["estado"] = ESPERANDO_MOVIMIENTO
            guardar_estados_usuario(estados_usuario)
            
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"üì¶ Material seleccionado: **{mensaje}**\n"
                     "üéØ *ExcelManager procesar√° este dato*\n\n"
                     "Selecciona el tipo de movimiento:",
                reply_markup=crear_teclado_movimientos(),
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå Material no v√°lido. Selecciona uno de los botones."
            )
    
    elif estado["estado"] == ESPERANDO_MOVIMIENTO:
        if mensaje in ["üìà Entrada", "üìâ Salida"]:
            estado["movimiento"] = mensaje
            estado["estado"] = ESPERANDO_CANTIDAD
            guardar_estados_usuario(estados_usuario)
            
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"üìä Movimiento: **{mensaje}**\n"
                     "üéØ *Se guardar√° en Excel usando ExcelManager*\n\n"
                     "Ingresa la cantidad:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå Cancelar")]], resize_keyboard=True),
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå Selecciona Entrada o Salida."
            )
    
    elif estado["estado"] == ESPERANDO_CANTIDAD:
        try:
            cantidad = float(mensaje)
            estado["cantidad"] = cantidad
            estado["estado"] = ESPERANDO_OBSERVACIONES
            guardar_estados_usuario(estados_usuario)
            
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"üî¢ Cantidad: **{cantidad}**\n"
                     "üéØ *ExcelManager guardar√° todos los datos*\n\n"
                     "Ingresa observaciones (o escribe 'ninguna'):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("Ninguna")], [KeyboardButton("‚ùå Cancelar")]], resize_keyboard=True),
                parse_mode='Markdown'
            )
        except:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå Ingresa un n√∫mero v√°lido para la cantidad."
            )
    
    elif estado["estado"] == ESPERANDO_OBSERVACIONES:
        observaciones = mensaje if mensaje.lower() != "ninguna" else ""
        
        # Guardar usando ExcelManager
        fecha = datetime.now().strftime("%d/%m/%Y")
        hora = datetime.now().strftime("%H:%M:%S")
        usuario = update.message.from_user.first_name or "Usuario"
        
        exito = ExcelManager.guardar_material(
            fecha, hora, estado["material"], usuario,
            estado["movimiento"], estado["cantidad"], observaciones
        )
        
        if exito:
            mensaje_confirmacion = f"""‚úÖ **MATERIAL REGISTRADO CON √âXITO**
üéØ *Guardado usando ExcelManager*

üì¶ **Material:** {estado["material"]}
üìä **Movimiento:** {estado["movimiento"]}
üî¢ **Cantidad:** {estado["cantidad"]}
üìù **Observaciones:** {observaciones or "Ninguna"}
üìÖ **Fecha:** {fecha} {hora}
üë§ **Usuario:** {usuario}

üéØ **Sistema Modular:** Datos almacenados correctamente"""

            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=mensaje_confirmacion,
                reply_markup=crear_menu_principal(),
                parse_mode='Markdown'
            )
        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚ùå Error en ExcelManager al guardar.\n"
                     "Verifica que el m√≥dulo est√© funcionando correctamente.",
                reply_markup=crear_menu_principal()
            )
        
        # Limpiar estado
        del estados_usuario[user_id]
        guardar_estados_usuario(estados_usuario)
    
    elif estado["estado"] == ESPERANDO_ACTIVIDAD:
        # Guardar actividad usando ExcelManager
        fecha = datetime.now().strftime("%d/%m/%Y")
        hora = datetime.now().strftime("%H:%M:%S")
        usuario = update.message.from_user.first_name or "Usuario"
        
        # Nota: necesitar√≠as agregar un m√©todo para actividades en ExcelManager
        # Por ahora, simular el guardado
        
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=f"‚úÖ **ACTIVIDAD REGISTRADA**\n"
                 f"üéØ *Guardada usando ExcelManager*\n\n"
                 f"üìù {mensaje}\nüïí {hora}\n\n"
                 f"**Sistema Modular:** Actividad almacenada correctamente",
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
        
        # Limpiar estado
        del estados_usuario[user_id]
        guardar_estados_usuario(estados_usuario)

# =============================================================================
# HANDLER PARA FOTOS
# =============================================================================

async def manejar_foto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja fotos enviadas al bot usando el sistema modular"""
    try:
        # Crear carpetas si no existen
        carpeta_dia = crear_carpeta_fotos()
        
        # Informaci√≥n de la foto
        fecha = datetime.now().strftime("%d/%m/%Y")
        hora = datetime.now().strftime("%H:%M:%S")
        usuario = update.message.from_user.first_name or "Usuario"
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Descargar foto
        foto = update.message.photo[-1]  # La foto de mayor resoluci√≥n
        archivo_foto = await context.bot.get_file(foto.file_id)
        
        nombre_archivo = f"foto_{timestamp}_{foto.file_id[:8]}.jpg"
        ruta_completa = os.path.join(carpeta_dia, nombre_archivo)
        
        await archivo_foto.download_to_drive(ruta_completa)
        
        # Redimensionar foto para ahorrar espacio
        try:
            with Image.open(ruta_completa) as img:
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                img.thumbnail((1200, 900), Image.Resampling.LANCZOS)
                img.save(ruta_completa, 'JPEG', quality=85, optimize=True)
        except Exception as e:
            print(f"Error redimensionando foto: {e}")
        
        # Aqu√≠ se podr√≠a usar ExcelManager para guardar el registro de la foto
        actividad = update.message.caption or "Foto de actividad de planta"
        
        mensaje_confirmacion = f"""üì∏ **FOTO GUARDADA CON SISTEMA MODULAR**

üìÖ **Fecha:** {fecha}
üïí **Hora:** {hora}
üë§ **Usuario:** {usuario}
üìù **Descripci√≥n:** {actividad}
üìÅ **Archivo:** {nombre_archivo}

‚úÖ **Sistema Modular:**
‚Ä¢ Foto organizada autom√°ticamente
‚Ä¢ Disponible para PDFCreator
‚Ä¢ Compatible con reportes fotogr√°ficos

üí° Aparecer√° en reportes generados con PDFCreator"""

        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=mensaje_confirmacion,
            reply_markup=crear_menu_principal(),
            parse_mode='Markdown'
        )
            
    except Exception as e:
        print(f"Error manejando foto: {e}")
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå Error al procesar la foto.\n"
                 "Verifica que el sistema modular est√© funcionando correctamente."
        )

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================

def main():
    """Funci√≥n principal del bot modular"""
    global estados_usuario, estados_produccion
    
    print("üè≠ === BOT MODULAR UNIFICADO - PLANTA TUPIZA ===")
    print(f"üïí Iniciado: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("‚úÖ ARQUITECTURA MODULAR IMPLEMENTADA:")
    print("   üìä ExcelManager - Gesti√≥n de datos Excel")
    print("   üìà GraphicsGenerator - Gr√°ficas profesionales")
    print("   üéØ MenuController - Navegaci√≥n intuitiva")
    print("   üìÑ PDFCreator - Reportes ejecutivos")
    print("üéØ VENTAJAS DEL SISTEMA MODULAR:")
    print("   ‚Ä¢ C√≥digo organizado y mantenible")
    print("   ‚Ä¢ M√≥dulos independientes y reutilizables")
    print("   ‚Ä¢ F√°cil agregar nuevas funcionalidades")
    print("   ‚Ä¢ Separaci√≥n clara de responsabilidades")
    print("üì± Usa /start en Telegram para comenzar")
    print("üîÑ Bot modular funcionando 24/7...")
    print()
    
    # Verificar TOKEN
    if not TOKEN:
        print("‚ùå CONFIGURA EL TOKEN DEL BOT PRIMERO")
        print("1. Ve a @BotFather en Telegram")
        print("2. Crea un nuevo bot o usa uno existente")
        print("3. Exporta la variable BOT_TOKEN con el valor dado")
        print("4. Ejecuta el script nuevamente")
        return
    
    # Verificar y crear archivos usando ExcelManager
    try:
        ExcelManager.verificar_y_crear_archivos()
        print("‚úÖ ExcelManager verific√≥ y cre√≥ archivos necesarios")
    except Exception as e:
        print(f"‚ö†Ô∏è Error en ExcelManager: {e}")
    
    # Crear carpetas necesarias
    crear_carpeta_fotos()
    
    # Cargar estados
    cargar_estados_usuario()
    cargar_estados_produccion()
    
    # Crear aplicaci√≥n
    aplicacion = Application.builder().token(TOKEN).build()
    
    # Agregar handlers
    aplicacion.add_handler(CommandHandler("start", comando_start))
    aplicacion.add_handler(MessageHandler(filters.PHOTO, manejar_foto))
    aplicacion.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, manejar_mensaje))
    
    # Mostrar estado final
    print("üéØ === SISTEMA MODULAR LISTO ===")
    print("üìä ExcelManager - Listo para gestionar datos")
    print("üìà GraphicsGenerator - Listo para crear gr√°ficas")  
    print("üéØ MenuController - Listo para manejar navegaci√≥n")
    print("üìÑ PDFCreator - Listo para generar reportes")
    print("üöÄ Bot modular iniciado. Presiona Ctrl+C para detener.")
    
    # Ejecutar bot
    aplicacion.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Bot modular detenido por el usuario")
        print("üìÑ Estados de conversaci√≥n guardados")
        print("‚úÖ Sistema modular puede reiniciarse cuando sea necesario")
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO EN SISTEMA MODULAR: {e}")
        print("\nüîß VERIFICA:")
        print("1. Que todos los m√≥dulos est√©n en modules/")
        print("2. Que la variable BOT_TOKEN est√© configurada")
        print("3. Que las librer√≠as est√©n instaladas")
