"""
üìÑ modules/pdf_creator.py - GENERACI√ìN DE REPORTES PDF PROFESIONALES CON ENCABEZADO Y PIE
Versi√≥n mejorada con encabezado institucional con imagen y pie de p√°gina personalizado
"""

import os
from datetime import datetime
from .config import *
from .excel_manager import ExcelManager

try:
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
    from reportlab.platypus import PageTemplate, Frame, Image as RLImage
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib import colors
    from reportlab.lib.units import inch, cm
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from reportlab.platypus.flowables import Flowable
    PDF_DISPONIBLE = True
    print("‚úÖ ReportLab cargado correctamente")
except ImportError as e:
    PDF_DISPONIBLE = False
    print(f"‚ö†Ô∏è ReportLab no disponible: {e}")
    print("üí° Instala con: pip install reportlab")

class EncabezadoPersonalizado:
    """Clase para agregar encabezado con imagen y pie de p√°gina en todas las p√°ginas del PDF
    SOLUCI√ìN A PROBLEMAS COMUNES:
    - ‚úÖ Encabezado y pie en TODAS las p√°ginas (no solo la primera)
    - ‚úÖ MISMO tama√±o en primera p√°gina y p√°ginas siguientes 
    - ‚úÖ Posiciones exactas y consistentes
    """
    
    def __init__(self, ruta_imagen="encabezado_tupiza.png", ruta_pie="pie_tupiza.png"):
        self.ruta_imagen = ruta_imagen
        self.ruta_pie = ruta_pie
        # CONSTANTES para asegurar MISMO tama√±o siempre
        self.ENCABEZADO_X = 72
        self.ENCABEZADO_WIDTH = 7*inch
        self.ENCABEZADO_HEIGHT = 1.2*inch
        self.PIE_X = 72
        self.PIE_Y = 25
        self.PIE_WIDTH = 7*inch
        self.PIE_HEIGHT = 0.8*inch
    
    def primera_pagina(self, canvas, doc):
        """Encabezado y pie para la primera p√°gina - MISMAS dimensiones que el resto"""
        canvas.saveState()
        try:
            # ==========================================
            # ENCABEZADO (parte superior) - COORDENADAS FIJAS
            # ==========================================
            if os.path.exists(self.ruta_imagen):
                canvas.drawImage(self.ruta_imagen, 
                               self.ENCABEZADO_X,  # CONSTANTE: Posici√≥n X fija
                               doc.height + doc.topMargin - 15,  # CONSTANTE: Posici√≥n Y fija
                               width=self.ENCABEZADO_WIDTH,    # CONSTANTE: Ancho fijo
                               height=self.ENCABEZADO_HEIGHT,  # CONSTANTE: Alto fijo
                               preserveAspectRatio=True)
            else:
                self._encabezado_texto(canvas, doc)
            
            # ==========================================
            # PIE DE P√ÅGINA (parte inferior) - COORDENADAS FIJAS
            # ==========================================
            if os.path.exists(self.ruta_pie):
                canvas.drawImage(self.ruta_pie, 
                               self.PIE_X,      # CONSTANTE: Posici√≥n X fija
                               self.PIE_Y,      # CONSTANTE: Posici√≥n Y fija
                               width=self.PIE_WIDTH,   # CONSTANTE: Ancho fijo
                               height=self.PIE_HEIGHT, # CONSTANTE: Alto fijo
                               preserveAspectRatio=True)
            else:
                self._pie_texto(canvas, doc)
                
        except Exception as e:
            print(f"Error en encabezado primera p√°gina: {e}")
        finally:
            canvas.restoreState()
    
    def paginas_siguientes(self, canvas, doc):
        """Encabezado y pie para p√°ginas siguientes - EXACTAMENTE IGUALES a primera p√°gina"""
        canvas.saveState()
        try:
            # ==========================================
            # ENCABEZADO (parte superior) - MISMAS COORDENADAS QUE PRIMERA P√ÅGINA
            # ==========================================
            if os.path.exists(self.ruta_imagen):
                canvas.drawImage(self.ruta_imagen, 
                               self.ENCABEZADO_X,  # MISMA posici√≥n X que primera p√°gina
                               doc.height + doc.topMargin - 15,  # MISMA posici√≥n Y que primera p√°gina
                               width=self.ENCABEZADO_WIDTH,    # MISMO ancho que primera p√°gina
                               height=self.ENCABEZADO_HEIGHT,  # MISMA altura que primera p√°gina
                               preserveAspectRatio=True)
            else:
                self._encabezado_texto(canvas, doc)
            
            # ==========================================
            # PIE DE P√ÅGINA (parte inferior) - MISMAS COORDENADAS QUE PRIMERA P√ÅGINA
            # ==========================================
            if os.path.exists(self.ruta_pie):
                canvas.drawImage(self.ruta_pie, 
                               self.PIE_X,      # MISMA posici√≥n X que primera p√°gina
                               self.PIE_Y,      # MISMA posici√≥n Y que primera p√°gina
                               width=self.PIE_WIDTH,   # MISMO ancho que primera p√°gina
                               height=self.PIE_HEIGHT, # MISMA altura que primera p√°gina
                               preserveAspectRatio=True)
            else:
                self._pie_texto(canvas, doc)
                
        except Exception as e:
            print(f"Error en encabezado p√°ginas siguientes: {e}")
        finally:
            canvas.restoreState()
    
    def _encabezado_texto(self, canvas, doc):
        """Encabezado de texto como fallback - MISMA posici√≥n siempre"""
        canvas.setFont("Helvetica-Bold", 12)
        canvas.drawCentredText(doc.width/2 + 72, doc.height + doc.topMargin - 30, 
                              "GOBIERNO AUT√ìNOMO MUNICIPAL DE TUPIZA")
        canvas.setFont("Helvetica", 10)
        canvas.drawCentredText(doc.width/2 + 72, doc.height + doc.topMargin - 45,
                              "Planta Municipal de Premoldeados")
        canvas.drawCentredText(doc.width/2 + 72, doc.height + doc.topMargin - 60,
                              "Sistema de Control de Inventarios")
    
    def _pie_texto(self, canvas, doc):
        """Pie de p√°gina de texto como fallback - MISMA posici√≥n siempre"""
        canvas.setFont("Helvetica", 8)
        fecha_actual = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        canvas.drawCentredText(doc.width/2 + 72, 40,
                              f"Generado el {fecha_actual}")
        canvas.drawCentredText(doc.width/2 + 72, 25,
                              "Sistema de Control de Inventarios - Planta Premoldeados Tupiza")

class MarcaDeAgua(Flowable):
    """Clase para crear marca de agua en PDFs - CORREGIDA para evitar conflictos con m√°rgenes"""
    
    def __init__(self, texto="GOBIERNO MUNICIPAL TUPIZA"):
        if not PDF_DISPONIBLE:
            return
        Flowable.__init__(self)
        self.texto = texto
        # CORRIGIDO: Usar dimensiones m√°s peque√±as para evitar conflicto con m√°rgenes
        self.width = 400  # Reducido de letter[0] (612)
        self.height = 300  # Reducido de letter[1] (792)
    
    def draw(self):
        """Dibuja la marca de agua - CORREGIDA para evitar errores de tama√±o"""
        if not PDF_DISPONIBLE:
            return
        canvas = self.canv
        canvas.saveState()
        try:
            canvas.setFont("Helvetica", 50)  # Reducido de 60
            canvas.setFillGray(0.95)  # M√°s claro (era 0.9)
            canvas.rotate(45)
            # CORRIGIDO: Posici√≥n ajustada para no interferir con m√°rgenes
            canvas.drawCentredText(200, -50, self.texto)  # Posici√≥n m√°s conservadora
        except Exception as e:
            print(f"Error dibujando marca de agua: {e}")
        finally:
            canvas.restoreState()

class PDFCreator:
    """
    Generador avanzado de reportes PDF con encabezado y pie de p√°gina institucional
    """
    
    @staticmethod
    def crear_estilos():
        """Crea estilos personalizados para el PDF"""
        if not PDF_DISPONIBLE:
            return None
            
        estilos = getSampleStyleSheet()
        
        # Estilo para t√≠tulo principal
        titulo_principal = ParagraphStyle(
            'TituloPrincipal',
            parent=estilos['Heading1'],
            fontSize=18,
            textColor=colors.HexColor('#1f4e79'),
            alignment=TA_CENTER,
            spaceAfter=20,
            fontName='Helvetica-Bold'
        )
        
        # Estilo para subt√≠tulos
        subtitulo = ParagraphStyle(
            'Subtitulo',
            parent=estilos['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#2e75b6'),
            spaceBefore=15,
            spaceAfter=10,
            fontName='Helvetica-Bold'
        )
        
        # Estilo para encabezado de secci√≥n
        encabezado = ParagraphStyle(
            'Encabezado',
            parent=estilos['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#1f4e79'),
            alignment=TA_CENTER,
            spaceBefore=5,
            spaceAfter=5,
            fontName='Helvetica-Bold'
        )
        
        # Estilo para pie de p√°gina
        pie = ParagraphStyle(
            'Pie',
            parent=estilos['Normal'],
            fontSize=8,
            textColor=colors.grey,
            alignment=TA_CENTER,
            spaceBefore=10,
            fontName='Helvetica'
        )
        
        return {
            'titulo': titulo_principal,
            'subtitulo': subtitulo,
            'encabezado': encabezado,
            'pie': pie,
            'normal': estilos['Normal']
        }
    
    @staticmethod
    def generar_pdf_materiales(con_encabezado=True, con_marca_agua=False):
        """Genera reporte PDF completo de materiales
        
        Args:
            con_encabezado (bool): Si True, incluye encabezado y pie institucional en TODAS las p√°ginas
            con_marca_agua (bool): Si True, incluye marca de agua (puede causar problemas con m√°rgenes)
        """
        if not PDF_DISPONIBLE:
            print("‚ùå ReportLab no disponible")
            print("üí° Instala con: pip install reportlab")
            return None
        
        try:
            # Verificar que existe el archivo
            if not os.path.exists(ARCHIVO_EXCEL_MATERIALES):
                print(f"‚ùå No se encontr√≥ el archivo: {ARCHIVO_EXCEL_MATERIALES}")
                return None
            
            # Nombre del archivo PDF
            nombre_pdf = f"reporte_materiales_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            # Configurar encabezado seg√∫n par√°metro
            if con_encabezado:
                # Crear el documento con m√°rgenes ajustados para encabezado y pie
                doc = SimpleDocTemplate(
                    nombre_pdf,
                    pagesize=letter,
                    rightMargin=72,
                    leftMargin=72,
                    topMargin=120,  # Espacio para encabezado
                    bottomMargin=100  # Espacio para pie de p√°gina
                )
                
                # Crear instancia del encabezado personalizado
                encabezado_personalizado = EncabezadoPersonalizado()
            else:
                # Documento simple sin encabezado
                doc = SimpleDocTemplate(
                    nombre_pdf,
                    pagesize=letter,
                    rightMargin=72,
                    leftMargin=72,
                    topMargin=72,   # M√°rgenes normales
                    bottomMargin=72 # M√°rgenes normales
                )
            
            elementos = []
            estilos = PDFCreator.crear_estilos()
            
            # Agregar marca de agua solo si se solicita espec√≠ficamente
            if con_encabezado and con_marca_agua:
                try:
                    elementos.append(MarcaDeAgua())
                except Exception as e:
                    print(f"‚ö†Ô∏è Error agregando marca de agua (se omite): {e}")
            
            # T√≠tulo del documento
            titulo_doc = Paragraph("REPORTE DETALLADO DE INVENTARIO DE MATERIALES", estilos['titulo'])
            elementos.append(titulo_doc)
            elementos.append(Spacer(1, 20))
            
            # Informaci√≥n del reporte
            info_reporte = f"""
            <b>Fecha de generaci√≥n:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}<br/>
            <b>Sistema:</b> Control de Inventarios - Versi√≥n Modular<br/>
            <b>Entidad:</b> Gobierno Aut√≥nomo Municipal de Tupiza<br/>
            <b>Departamento:</b> Planta Municipal de Premoldeados
            """
            elementos.append(Paragraph(info_reporte, estilos['normal']))
            elementos.append(Spacer(1, 30))
            
            # Resumen ejecutivo
            elementos.append(Paragraph("1. RESUMEN EJECUTIVO", estilos['subtitulo']))
            
            # Obtener estad√≠sticas
            total_registros = ExcelManager.contar_registros_materiales()
            stock_actual = ExcelManager.obtener_stock_materiales()
            
            resumen = f"""
            <b>Estado del Inventario:</b><br/>
            ‚Ä¢ Total de registros de movimientos: {total_registros}<br/>
            ‚Ä¢ N√∫mero de materiales diferentes: {len(stock_actual)}<br/>
            ‚Ä¢ Fecha de √∫ltima actualizaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}<br/>
            ‚Ä¢ Status del sistema: Operativo
            """
            elementos.append(Paragraph(resumen, estilos['normal']))
            elementos.append(Spacer(1, 20))
            
            # Stock actual
            elementos.append(Paragraph("2. STOCK ACTUAL DE MATERIALES", estilos['subtitulo']))
            
            if stock_actual:
                # Crear tabla de stock
                datos_stock = [['Material', 'Cantidad Actual', 'Estado']]
                
                for material, cantidad in stock_actual.items():
                    if cantidad < 10:
                        estado = "üî¥ Cr√≠tico"
                    elif cantidad < 50:
                        estado = "üü° Bajo"
                    else:
                        estado = "üü¢ Normal"
                    
                    datos_stock.append([material, f"{cantidad:.2f}", estado])
                
                tabla_stock = Table(datos_stock, colWidths=[3*inch, 1.5*inch, 1.5*inch])
                tabla_stock.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f4e79')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ]))
                
                elementos.append(tabla_stock)
            else:
                elementos.append(Paragraph("No hay datos de stock disponibles.", estilos['normal']))
            
            elementos.append(Spacer(1, 30))
            
            # √öltimos movimientos
            elementos.append(Paragraph("3. √öLTIMOS MOVIMIENTOS", estilos['subtitulo']))
            
            try:
                import openpyxl
                libro = openpyxl.load_workbook(ARCHIVO_EXCEL_MATERIALES)
                hoja = libro.active
                
                datos_movimientos = [['Fecha', 'Material', 'Tipo', 'Cantidad', 'Observaciones']]
                
                # Obtener √∫ltimos 10 registros
                max_row = hoja.max_row
                start_row = max(5, max_row - 9)  # √öltimos 10 registros
                
                for row in range(start_row, max_row + 1):
                    fecha = hoja.cell(row=row, column=1).value or ""
                    material = hoja.cell(row=row, column=3).value or ""
                    tipo = hoja.cell(row=row, column=5).value or ""
                    cantidad = hoja.cell(row=row, column=6).value or 0
                    observaciones = hoja.cell(row=row, column=7).value or ""
                    
                    datos_movimientos.append([
                        str(fecha), str(material), str(tipo), 
                        f"{cantidad:.2f}", str(observaciones)[:30] + "..." if len(str(observaciones)) > 30 else str(observaciones)
                    ])
                
                libro.close()
                
                tabla_movimientos = Table(datos_movimientos, colWidths=[1*inch, 1.5*inch, 1*inch, 1*inch, 2*inch])
                tabla_movimientos.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2e75b6')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ]))
                
                elementos.append(tabla_movimientos)
                
            except Exception as e:
                elementos.append(Paragraph(f"Error al cargar movimientos: {e}", estilos['normal']))
            
            elementos.append(Spacer(1, 30))
            
            # Estad√≠sticas generales
            elementos.append(Paragraph("4. ESTAD√çSTICAS GENERALES", estilos['subtitulo']))
            
            estadisticas = f"""
            <b>INFORMACI√ìN DEL SISTEMA:</b><br/>
            ‚Ä¢ Total de registros en el sistema: {total_registros}<br/>
            ‚Ä¢ Archivo de datos: {os.path.basename(ARCHIVO_EXCEL_MATERIALES)}<br/>
            ‚Ä¢ √öltima actualizaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}<br/>
            ‚Ä¢ Estado del sistema: Operativo<br/>
            <br/>
            <b>RECOMENDACIONES:</b><br/>
            ‚Ä¢ Realizar backup semanal de los archivos<br/>
            ‚Ä¢ Verificar niveles cr√≠ticos de materiales<br/>
            ‚Ä¢ Mantener registro actualizado de movimientos<br/>
            ‚Ä¢ Revisar consumos an√≥malos<br/>
            <br/>
            <b>CONTACTO T√âCNICO:</b><br/>
            ‚Ä¢ Sistema: Control de Inventarios Modular<br/>
            ‚Ä¢ Soporte: Secretar√≠a Municipal T√©cnica<br/>
            ‚Ä¢ Ubicaci√≥n: Planta Municipal de Premoldeados - Tupiza
            """
            
            elementos.append(Paragraph(estadisticas, estilos['normal']))
            
            # Construir PDF con o sin encabezado seg√∫n configuraci√≥n
            if con_encabezado:
                doc.build(elementos, 
                         onFirstPage=encabezado_personalizado.primera_pagina,     # ‚úÖ Encabezado en primera p√°gina
                         onLaterPages=encabezado_personalizado.paginas_siguientes) # ‚úÖ Encabezado en TODAS las p√°ginas siguientes
                print(f"‚úÖ PDF CON ENCABEZADO generado exitosamente: {nombre_pdf}")
            else:
                doc.build(elementos)  # PDF simple sin encabezado
                print(f"‚úÖ PDF SIMPLE generado exitosamente: {nombre_pdf}")
            
            return nombre_pdf
            
        except Exception as e:
            print(f"‚ùå Error generando PDF de materiales: {e}")
            return None
    
    @staticmethod
    def generar_pdf_combustibles(con_encabezado=True, con_marca_agua=False):
        """Genera reporte espec√≠fico de combustibles
        
        Args:
            con_encabezado (bool): Si True, incluye encabezado y pie institucional en TODAS las p√°ginas
            con_marca_agua (bool): Si True, incluye marca de agua (puede causar problemas con m√°rgenes)
        """
        if not PDF_DISPONIBLE:
            print("‚ùå ReportLab no disponible")
            print("üí° Instala con: pip install reportlab")
            return None
        
        try:
            nombre_pdf = f"reporte_combustibles_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            # Configurar encabezado seg√∫n par√°metro
            if con_encabezado:
                # Crear el documento con m√°rgenes ajustados
                doc = SimpleDocTemplate(
                    nombre_pdf,
                    pagesize=letter,
                    rightMargin=72,
                    leftMargin=72,
                    topMargin=120,  # Espacio para encabezado
                    bottomMargin=100  # Espacio para pie de p√°gina
                )
                
                # Crear instancia del encabezado personalizado
                encabezado_personalizado = EncabezadoPersonalizado()
            else:
                # Documento simple sin encabezado
                doc = SimpleDocTemplate(
                    nombre_pdf,
                    pagesize=letter,
                    rightMargin=72,
                    leftMargin=72,
                    topMargin=72,   # M√°rgenes normales
                    bottomMargin=72 # M√°rgenes normales
                )
            
            elementos = []
            estilos = PDFCreator.crear_estilos()
            
            # Agregar marca de agua solo si se solicita espec√≠ficamente
            if con_encabezado and con_marca_agua:
                try:
                    elementos.append(MarcaDeAgua())
                except Exception as e:
                    print(f"‚ö†Ô∏è Error agregando marca de agua (se omite): {e}")
            
            # T√≠tulo
            titulo = Paragraph("REPORTE ESPECIALIZADO DE COMBUSTIBLES", estilos['titulo'])
            elementos.append(titulo)
            elementos.append(Spacer(1, 20))
            
            # Informaci√≥n del reporte
            info_reporte = f"""
            <b>Fecha de generaci√≥n:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}<br/>
            <b>Tipo de reporte:</b> Control de Combustibles<br/>
            <b>Sistema:</b> Inventario Modular - Tupiza<br/>
            <b>Departamento:</b> Planta Municipal de Premoldeados
            """
            elementos.append(Paragraph(info_reporte, estilos['normal']))
            elementos.append(Spacer(1, 30))
            
            # Obtener datos de combustibles - CORREGIDO: m√©todo correcto
            stock_combustibles = ExcelManager.obtener_datos_combustibles()  # ‚úÖ M√©todo correcto
            
            if stock_combustibles:
                elementos.append(Paragraph("STOCK ACTUAL DE COMBUSTIBLES", estilos['subtitulo']))
                
                # Crear tabla de combustibles
                datos_combustibles = [['Tipo de Combustible', 'Cantidad (Litros)', 'Estado', 'Nivel']]
                
                for combustible, cantidad in stock_combustibles.items():
                    if cantidad < 50:
                        estado = "üî¥ Cr√≠tico"
                        nivel = "Requiere abastecimiento inmediato"
                    elif cantidad < 100:
                        estado = "üü° Bajo"
                        nivel = "Programar abastecimiento"
                    else:
                        estado = "üü¢ Normal"
                        nivel = "Stock adecuado"
                    
                    datos_combustibles.append([
                        combustible.title(),
                        f"{cantidad:.2f}",
                        estado,
                        nivel
                    ])
                
                tabla_combustibles = Table(datos_combustibles, colWidths=[1.5*inch, 1.2*inch, 1*inch, 2.3*inch])
                tabla_combustibles.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#d32f2f')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ]))
                
                elementos.append(tabla_combustibles)
                elementos.append(Spacer(1, 30))
                
                # An√°lisis
                total_combustible = sum(stock_combustibles.values())
                elementos.append(Paragraph("AN√ÅLISIS DEL STOCK", estilos['subtitulo']))
                
                analisis = f"""
                <b>Total de combustible en stock:</b> {total_combustible:.2f} litros<br/>
                <b>Gasolina:</b> {stock_combustibles.get('gasolina', 0):.2f} litros<br/>
                <b>Diesel:</b> {stock_combustibles.get('diesel', 0):.2f} litros<br/>
                <br/>
                <b>Estado general:</b> {'üî¥ Cr√≠tico' if total_combustible < 100 else 'üü¢ Aceptable'}<br/>
                <b>Recomendaci√≥n:</b> {'Abastecimiento urgente requerido' if total_combustible < 100 else 'Mantener monitoreo regular'}
                """
                
                elementos.append(Paragraph(analisis, estilos['normal']))
            else:
                elementos.append(Paragraph("No hay datos de combustibles disponibles.", estilos['normal']))
            
            # Construir PDF con o sin encabezado seg√∫n configuraci√≥n
            if con_encabezado:
                doc.build(elementos,
                         onFirstPage=encabezado_personalizado.primera_pagina,     # ‚úÖ Encabezado en primera p√°gina
                         onLaterPages=encabezado_personalizado.paginas_siguientes) # ‚úÖ Encabezado en TODAS las p√°ginas siguientes
                print(f"‚úÖ PDF DE COMBUSTIBLES CON ENCABEZADO generado: {nombre_pdf}")
            else:
                doc.build(elementos)  # PDF simple sin encabezado
                print(f"‚úÖ PDF DE COMBUSTIBLES SIMPLE generado: {nombre_pdf}")
            
            return nombre_pdf
            
        except Exception as e:
            print(f"‚ùå Error generando PDF de combustibles: {e}")
            return None

# ============================================================================
# FUNCIONES DE UTILIDAD PARA PDFS
# ============================================================================

def validar_reportlab():
    """Valida que ReportLab est√© disponible"""
    return PDF_DISPONIBLE

def crear_imagenes_ejemplo():
    """Crea im√°genes de ejemplo para encabezado y pie si no existen"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # Crear imagen de encabezado
        if not os.path.exists("encabezado_tupiza.png"):
            img_encabezado = Image.new('RGB', (700, 120), color='white')
            draw = ImageDraw.Draw(img_encabezado)
            
            # T√≠tulo principal
            draw.text((50, 20), "GOBIERNO AUT√ìNOMO MUNICIPAL DE TUPIZA", fill='blue')
            draw.text((50, 50), "Planta Municipal de Premoldeados", fill='black')
            draw.text((50, 80), "Sistema de Control de Inventarios", fill='gray')
            
            img_encabezado.save("encabezado_tupiza.png")
            print("‚úÖ Imagen de encabezado creada: encabezado_tupiza.png")
        
        # Crear imagen de pie
        if not os.path.exists("pie_tupiza.png"):
            img_pie = Image.new('RGB', (700, 80), color='lightgray')
            draw = ImageDraw.Draw(img_pie)
            
            fecha = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
            draw.text((50, 20), f"Generado el {fecha}", fill='black')
            draw.text((50, 50), "Documento oficial del Gobierno Municipal de Tupiza", fill='blue')
            
            img_pie.save("pie_tupiza.png")
            print("‚úÖ Imagen de pie creada: pie_tupiza.png")
        
    except ImportError:
        print("‚ö†Ô∏è PIL no disponible para crear im√°genes de ejemplo")
        print("üí° Las im√°genes se crear√°n como texto si no existen")

# Verificaci√≥n inicial
if __name__ == "__main__":
    print("üîç Verificando m√≥dulo PDF...")
    if validar_reportlab():
        print("‚úÖ ReportLab disponible")
        crear_imagenes_ejemplo()
        
        print("\nüìã EJEMPLOS DE USO:")
        print("# Reportes CON encabezado y pie institucional (RECOMENDADO)")
        print("PDFCreator.generar_pdf_materiales()  # ‚úÖ Con encabezado")
        print("PDFCreator.generar_pdf_combustibles()  # ‚úÖ Con encabezado")
        print("")
        print("# Reportes CON encabezado Y marca de agua (OPCIONAL)")
        print("PDFCreator.generar_pdf_materiales(con_marca_agua=True)  # Con marca de agua")
        print("PDFCreator.generar_pdf_combustibles(con_marca_agua=True)  # Con marca de agua")
        print("")
        print("# Reportes SIN encabezado (si es necesario)")
        print("PDFCreator.generar_pdf_materiales(con_encabezado=False)  # Sin encabezado")
        print("PDFCreator.generar_pdf_combustibles(con_encabezado=False)  # Sin encabezado")
        print("")
        print("üéØ SOLUCIONES IMPLEMENTADAS:")
        print("‚úÖ Encabezado y pie en TODAS las p√°ginas (no solo la primera)")
        print("‚úÖ MISMO tama√±o exacto en primera p√°gina y p√°ginas siguientes")
        print("‚úÖ Coordenadas fijas mediante constantes para evitar variaciones")
        print("‚úÖ Opci√≥n configurable para incluir o no encabezado")
        print("‚úÖ Marca de agua opcional y segura (sin conflictos de tama√±o)")
        print("‚úÖ M√©todo correcto para datos de combustibles")
        print("‚úÖ Fallback a texto si las im√°genes no existen")
        
    else:
        print("‚ùå ReportLab no disponible")
        print("üí° Instala con: pip install reportlab")
